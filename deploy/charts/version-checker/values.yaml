# Default values for version-checker.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Replica Count for version-checker
replicaCount: 1

# -- Additional Labels to apply to Service and Deployment/Pod Objects
additionalLabels: {}
# -- Additional Annotations to apply to Service and Deployment/Pod Objects
additionalAnnotations: {}

image:
  # -- Repository of the container image
  repository: quay.io/jetstack/version-checker
  # -- Override the chart version. Defaults to `appVersion` of the helm chart.
  tag: ""
  # -- Set the Image Pull Policy
  pullPolicy: IfNotPresent

# -- Configure tolerations
tolerations: []

# -- Configure nodeSelector
nodeSelector: {}

# Configure version-checkers Service
service:
  # -- Additional labels to add to the service
  labels: {}
  # -- Additional annotations to add to the service
  annotations: {}
  # -- Port to expose within the service
  port: 8080

# Configure version-checkers behaviour
versionChecker:
  # -- How long to hold on to image tags and their versions
  imageCacheTimeout: 30m
  # -- Configure version-checkers logging, valid options are: debug, info, warn, error, fatal, panic
  logLevel: info
  # -- Port/interface to which version-checker should bind too
  metricsServingAddress: 0.0.0.0:8080
  # -- Enable/Disable the requirement for an enable.version-checker.io annotation on pods.
  testAllContainers: true

# Azure Container Registry Credentials Configuration
acr:
  # -- (string) Username to authenticate with azure container registry
  username:
  # -- (string) Password to authenticate with azure container registry
  password:
  # -- (string) Refresh token to authenticate with azure container registry. Cannot be used with `acr.username` / `acr.password`.
  refreshToken:

# Docker Hub Credentials Configuration
docker:
  # -- (string) Username to authenticate with docker registry
  username:
  # -- (string) Password to authenticate with docker registry
  password:
  # -- (string) Token to authenticate with docker registry. Cannot be used with `docker.username` / `docker.password`.
  token:

# Amazon Elastic Container Registry Credentials Configuration
ecr:
  # -- (string) Provide AWS EKS Iam Role ARN following: [Specify A ServiceAccount Role](https://docs.aws.amazon.com/eks/latest/userguide/specify-service-account-role.html)
  iamRoleArn:

  # -- (string) ECR access key ID for read access to private registries
  accessKeyID:
  # -- (string) ECR secret access key for read access to private registries
  secretAccessKey:
  # -- (string) ECR session token for read access to private registries
  sessionToken:

# Google Container Registry Credentials Configuration
gcr:
  # -- (string) Access token for read access to private GCR registries
  token:

# Google Artifact Registry Credentials Configuration
ghcr:
  # -- (string) Personal Access token for read access to GHCR releases
  token:

# Quay.io Registry Credentials Configuration
quay:
  # -- (string) Access token for read access to private Quay registries
  token:

# -- Can be used to provide custom environment variables e.g. proxy settings
env: {}

# -- ([]{name: "", host: "", username:"", password:"", token:""}]) Setup a number of SelfHosted Repositories and their credentials
selfhosted:
  []
  #- name: REGISTRY
  #  host: http://registry:5000
  #  username:
  #  password:
  #  token:
  #- name: EXAMPLE
  #  host: https://artifactory.example.com
  #  username: foo
  #  password: bar
  #  token:


# -- Setup version-checkers resource requests/limits
resources:
  {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  #

# -- Set container-level security context
securityContext: {}
  # allowPrivilegeEscalation: false
  # capabilities:
  #   drop:
  #     - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 65534
  # seccompProfile:
  #   type: RuntimeDefault

# -- Set pod-level security context
podSecurityContext: {}

# Configure the readiness probe for version-checker
readinessProbe:
  # -- Enable/Disable the setting of a readinessProbe
  enabled: true
  httpGet:
    # -- Path to use for the readinessProbe
    path: /readyz
    # -- Port to use for the readinessProbe
    port: 8080
  # -- Number of seconds after the container has started before readiness probes are initiated.
  initialDelaySeconds: 3
  # -- How often (in seconds) to perform the readinessProbe.
  periodSeconds: 3

# Configure the healthcheck probe for version-checker
livenessProbe:
  # -- Enable/Disable the setting of a livenessProbe
  enabled: true
  httpGet:
    # -- Path to use for the livenessProbe
    path: /readyz
    # -- Port to use for the livenessProbe
    port: 8080
  # -- Number of seconds after the container has started before liveness probes are initiated.
  initialDelaySeconds: 3
  # -- How often (in seconds) to perform the livenessProbe.
  periodSeconds: 3

# Prometheus Operator
prometheus:
  # -- Deploy a Prometheus-Operator Prometheus Object to collect version-checker metrics
  enabled: false
  # -- Number of Prometheus replicas to create
  replicas: 1
  # -- ServiceAccount for new Prometheus Object
  serviceAccountName: prometheus

# Configure a Prometheus-Operator ServiceMonitor object
serviceMonitor:
  # -- Disable/Enable ServiceMonitor Object
  enabled: false
  # -- Additional labels to add to the ServiceMonitor
  additionalLabels: {}
